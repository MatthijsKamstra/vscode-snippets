

/* 
This is a converted list of haxe-sublime-bundle snippets created by Cl√©ment Charmet.
https://github.com/clemos/haxe-sublime-bundle/tree/master/Snippets
*/


"class" : {
	"prefix":"class", 
	"body":["class ${1:name} {" ,"	public function new () {" ,"		${0:// your code}" ,"	}" ,"}" ], 
	"description":"Class"
},

"do-while" : {
	"prefix":"do", 
	"body":["do${2: {" ,"	${3:// your code}$0" ,"} while (${1:condition});" ], 
	"description":"do while"
},

"enum" : {
	"prefix":"enum", 
	"body":["enum ${1:name} {" ,"	${0:// your code}" ,"}" ], 
	"description":"Enum"
},

"for" : {
	"prefix":"for", 
	"body":["for ( ${1:i} in ${3:0} ... ${4:n} ){" ,"	${6:// your code}$0" ,"}" ], 
	"description":"for"
},

"function-(f)" : {
	"prefix":"f", 
	"body":["function ($1) {${0:// your code};" ], 
	"description":"Anonymous Function (f)"
},

"function-(fun)" : {
	"prefix":"fun", 
	"body":["${1:public }function ${2:name} (${3:args})${4: : ${5:Void}${6: {" ,"	${7:// your code}$0" ,"}" ], 
	"description":"function"
},

"if-else-(ife)" : {
	"prefix":"ife", 
	"body":["if (${1:condition}) {" ,"	${0:// your code}" ,"} else {" ,"	" ,"}" ], 
	"description":"if-else (ife)"
},

"if" : {
	"prefix":"if", 
	"body":["if ( ${1:condition} )${2: {" ,"	${3:// your code}$0" ,"}" ], 
	"description":"if"
},

"import-(im)" : {
	"prefix":"im", 
	"body":["import ${1:package};" ], 
	"description":"Import (im)"
},

"interface" : {
	"prefix":"interface", 
	"body":["interface ${1:name} {" ,"	${0:// your code}	" ,"}" ], 
	"description":"Interface"
},

"main" : {
	"prefix":"main", 
	"body":["class ${1:name} {" ,"	" ,"	public function new () {" ,"		$0" ,"	}" ,"" ,"	static public function main () {" ,"		var app = new $1 ()$HX_W_SC;" ,"	}" ,"}" ], 
	"description":"Main class"
},

"private-function-(prf)" : {
	"prefix":"prf", 
	"body":["private function ${1:function_name}(${2:arguments}):${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Private Function (prf)"
},

"private-inline-function-(prif)" : {
	"prefix":"prif", 
	"body":["private inline function ${1:function_name}(${2:arguments}):${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Private Inline Function (prif)"
},

"private-static-function-(prsf)" : {
	"prefix":"prsf", 
	"body":["private static function ${1:function_name}(${2:arguments}):${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Private Static Function (prsf)"
},

"private-static-inline-function-(prsif)" : {
	"prefix":"prsif", 
	"body":["private static inline function ${1:function_name}(${2:arguments}):${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Private Static Inline Function (prsif)"
},

"private-static-inline-var-(prsiv)" : {
	"prefix":"prsiv", 
	"body":["private static inline var ${1:CONSTANT_NAME}${2::${3:Type}${4: = ${5:VALUE};" ], 
	"description":"Private Static Inline Variable (prsiv)"
},

"private-static-var-(prsv)" : {
	"prefix":"prsv", 
	"body":["private static var ${1:var_name}${2::${3:Type};" ], 
	"description":"Private Static Variable (prsv)"
},

"private-var-(pv)" : {
	"prefix":"prv", 
	"body":["private var ${1:var_name}${2::${3:Type};" ], 
	"description":"Private variable (prv)"
},

"property-(prop)" : {
	"prefix":"prop", 
	"body":["public var ${1:name} (${HX_ORB_W}get_${1:name} M,${HX_CM_W}set_${1:name} )$HX_CRB_C: ${2:type};" ,"private var _$1 : $2;" ,"" ,"function get_$1 ()$HX_CRB_W_C: $2 {" ,"	return _$1;" ,"}" ,"function set_$1(value : $2)$HX_CRB_W_C: $2 {" ,"	return _$1 = value;" ,"}" ], 
	"description":"Property with getter/setter (prop)"
},

"public-function-(pf)" : {
	"prefix":"pf", 
	"body":["public function ${1:function_name}(${2:arguments}):${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Public Function (pf)"
},

"public-inline-function-(pif)" : {
	"prefix":"pif", 
	"body":["public inline function ${1:function_name}(${2:arguments}):${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Public Inline Function (pif)"
},

"public-static-function-(psf)" : {
	"prefix":"psf", 
	"body":["public static function ${1:function_name}(${2:arguments}):${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Public Static Function (psf)"
},

"public-static-inline-function-(psif)" : {
	"prefix":"psif", 
	"body":["public static inline function ${1:function_name}(${2:arguments}):${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Public Static Inline Function (psif)"
},

"public-static-inline-var-(psiv)" : {
	"prefix":"psiv", 
	"body":["public static inline var ${1:CONSTANT_NAME}${2::${3:Type}${4: = ${5:VALUE};" ], 
	"description":"Public Static Inline Variable (psiv)"
},

"public-static-var-(psv)" : {
	"prefix":"psv", 
	"body":["public static var ${1:var_name}${2::${3:Type};" ], 
	"description":"Public Static Variable (psv)"
},

"public-var-(pv)" : {
	"prefix":"pv", 
	"body":["public var ${1:var_name}${2::${3:Type};" ], 
	"description":"Public Variable (pv)"
},

"switch" : {
	"prefix":"switch", 
	"body":["switch (${1:// your code}) {" ,"	case ${2:pattern} : $0" ,"}" ], 
	"description":"switch"
},

"this-(this)" : {
	"prefix":"this", 
	"body":["this.${1:property} = $1;" ], 
	"description":"Constructor Property (this)"
},

"var-(v)" : {
	"prefix":"v", 
	"body":["var ${1:name}${2: : ${3:Dynamic}${4: = ${5:value};" ], 
	"description":"Variable"
},

"while" : {
	"prefix":"while", 
	"body":["while (${1:condition})${2: {" ,"	${3:// your code}$0" ,"}" ], 
	"description":"while"
}