{

/*
	 // Place your snippets for Haxe here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/

/* 
This is a converted list of my sublime-bundle snippets [mck].
*/


"mck_asdoc" : {
	"prefix":"asdoc", 
	"body":["/**" ," * ${1:varName} " ," *" ," * @example		var _${1:varName}:* = new ${1:varName}();" ," * @see			" ," *" ," * @param		" ," *" ," * @return" ," */" ], 
	"description":"Create documentation for a function"
},

"mck_bitmap" : {
	"prefix":"bitmap", 
	"body":["" ,"var ${1:_bitmap} = new Bitmap (Assets.getBitmapData (\"assets/${2:imagename}\"));" ,"//${1:_bitmap}.alpha = 0.2;" ,"this.addChild (${1:_bitmap});" ,"" ], 
	"description":"bitmap"
},

"mck_haxesingleton" : {
	"prefix":"singleton", 
	"body":["" ,"package ${1:package_path};" ,"// $TM_FILEPATH" ,"" ,"class ${TM_FILENAME} {" ,"	" ,"	/**" ,"	* The only instance of this class." ,"	*/" ,"	private static var instance:${TM_FILENAME};" ,"	" ,"	private function new():Void {}" ,"" ,"	public static inline function getInstance():${TM_FILENAME}" ,"	{" ,"		if (instance == null)" ,"			return instance = new ${TM_FILENAME}();" ,"		else" ,"			return instance;" ,"	}" ,"" ,"	/**" ,"	* @example		${TM_FILENAME}.getInstance().init();" ,"	*/" ,"	public function init():Void" ,"	{" ,"		trace ('init');" ,"	} " ,"}" ,"" ], 
	"description":"Create a haxe singleton"
},

"mck_hr" : {
	"prefix":"hr", 
	"body":["// ____________________________________ ${1:getter/setter} ____________________________________" ], 
	"description":"Quick hr"
},

"mck_mck" : {
	"prefix":"mck", 
	"body":["// [mck] ${1:comment}" ], 
	"description":"Commented feedback with my [mck]"
},

"mck_newvar" : {
	"prefix":"var", 
	"body":["" ,"var _${1:className} = new ${1:className}();" ,"_${1:className}.name = '${1:className}';" ,"_${1:className}.x = 0;" ,"_${1:className}.y = 0;" ,"this.addChild(_${1:className});" ,"" ], 
	"description":"Quick class init"
},

"mck_onclickhandler" : {
	"prefix":"onclick", 
	"body":["" ,"private function ${1:onClickHandler}(e:MouseEvent):Void" ,"{" ,"	var ${2:_sprite} : Sprite = cast (e.currentTarget, Sprite);" ,"	switch (${2:_sprite}.name) {" ,"		case 'foobar': trace ('foobar');" ,"		default : trace (\"case '\"+${2:_sprite}.name+\"': trace ('\"+${2:_sprite}.name+\"');\");" ,"	}" ,"}" ,"" ], 
	"description":"quick onclickhandler"
},

"mck_remove_children" : {
	"prefix":"remove", 
	"body":["" ,"// remove all childern" ,"while (${1:this}.numChildren > 0) {" ,"	${1:this}.removeChildAt(0);" ,"}" ,"" ], 
	"description":"remove"
},

"mck_shape" : {
	"prefix":"shape", 
	"body":["" ,"var w = 250;" ,"var h = 50;" ,"var ${1:shape} = new ${2:Shape}();" ,"${1:shape}.graphics.clear();" ,"${1:shape}.graphics.beginFill(0x8e44ad, 1);" ,"${1:shape}.graphics.drawRoundRect(0, 0, w, h, 2 * 6, 2 * 6);" ,"${1:shape}.graphics.endFill();" ,"addChild(${1:shape});" ,"" ], 
	"description":"quick way to make a shape"
},

"mck_sprite" : {
	"prefix":"sprite", 
	"body":["" ,"var _w = 100;" ,"var _h = 20;" ,"" ,"var ${1:_sprite} = new Sprite();" ,"${1:_sprite}.name = \"${1:_sprite}\";" ,"${1:_sprite}.graphics.clear();" ,"${1:_sprite}.graphics.beginFill(0xff3333, 1);" ,"${1:_sprite}.graphics.drawRect(0, 0, w, h);" ,"${1:_sprite}.graphics.endFill();" ,"this.addChild(${1:_sprite});" ,"" ], 
	"description":"quick sprite"
},

"mck_switch" : {
	"prefix":"switch", 
	"body":["" ,"switch (${1:arg}) {" ,"	default : trace (\"case '\"+${1:arg}+\"': trace (\"+${1:arg}+\");\");" ,"}		" ,"" ], 
	"description":"simple switch"
},

"mck_switchs" : {
	"prefix":"switch", 
	"body":["" ,"switch (${1:var}) {" ,"	case 'twittercount': trace ('twittercount');" ,"	default : trace (\"case '\"+${1:var}+\"': trace ('\"+${1:var}+\"');\");" ,"}" ,"" ], 
	"description":"quick haxe switch"
},

"mck_text" : {
	"prefix":"text", 
	"body":["" ,"" ,"var _textField = new TextField();" ,"var format = new TextFormat (\"_sans\", 14, 0x000000);" ,"_textField.defaultTextFormat = format;" ,"// _textField.embedFonts = true;" ,"_textField.selectable = false;" ,"_textField.text = _text;" ,"_textField.autoSize = TextFieldAutoSize.LEFT;" ,"addChild (_textField);" ,"" ], 
	"description":"quick textfield"
},

"mck_trace" : {
	"prefix":"trace", 
	"body":["trace( \"${1:varName}: \" + ${1:varName} );" ], 
	"description":"Quick var trace"
},

"mck_trace_debug" : {
	"prefix":"trace", 
	"body":["trace( \"## ${1:debug}\" );" ], 
	"description":"Create debug trace"
},

"mck_trace_function" : {
	"prefix":"trace", 
	"body":["trace  ( '+ ${1:package.functionName}() - args: ' + [ ${2:vars} ] );" ], 
	"description":"Create a function trace"
},

/* 
This is a converted list of haxe-sublime-bundle snippets created by Cl√©ment Charmet.
https://github.com/clemos/haxe-sublime-bundle/tree/master/Snippets
*/


"sublime_class" : {
	"prefix":"class", 
	"body":["class ${1:name} {" ,"	public function new () {" ,"		${0:// your code}" ,"	}" ,"}" ], 
	"description":"Class"
},

"sublime_do-while" : {
	"prefix":"do", 
	"body":["do {" ,"	${3:// your code}" ,"} while (${1:condition});" ], 
	"description":"do while"
},

"sublime_enum" : {
	"prefix":"enum", 
	"body":["enum ${1:name} {" ,"	${0:// your code}" ,"}" ], 
	"description":"Enum"
},

"sublime_for" : {
	"prefix":"for", 
	"body":["for ( ${1:i} in ${3:0} ... ${4:n}} ) {" ,"	${6:// your code}" ,"}" ], 
	"description":"for"
},

"sublime_function-(f)" : {
	"prefix":"f", 
	"body":["function ($1) {" ,"	${0:// your code}" ,"};" ], 
	"description":"Anonymous Function (f)"
},

"sublime_function-(fun)" : {
	"prefix":"fun", 
	"body":["${1:public }function ${2:name} (${3:args}) : ${5:Void} {" ,"	${7:// your code}" ,"}" ], 
	"description":"function"
},

"sublime_if-else-(ife)" : {
	"prefix":"ife", 
	"body":["if (${1:condition}) {" ,"	${0:// your code}" ,"} else {" ,"	" ,"}" ], 
	"description":"if-else (ife)"
},

"sublime_if" : {
	"prefix":"if", 
	"body":["if ( ${1:condition} ) {" ,"	${3:// your code}" ,"}" ], 
	"description":"if"
},

"sublime_import-(im)" : {
	"prefix":"im", 
	"body":["import ${1:package};" ], 
	"description":"Import (im)"
},

"sublime_interface" : {
	"prefix":"interface", 
	"body":["interface ${1:name} {" ,"	${0:// your code}	" ,"}" ], 
	"description":"Interface"
},

"sublime_main" : {
	"prefix":"main", 
	"body":["class ${1:name} {" ,"	" ,"	public function new () {" ,"		$0" ,"	}" ,"" ,"	static public function main () {" ,"		var app = new $1 ()$HX_W_SC;" ,"	}" ,"}" ], 
	"description":"Main class"
},

"sublime_private-function-(prf)" : {
	"prefix":"prf", 
	"body":["private function ${1:function_name}(${2:arguments}) : ${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Private Function (prf)"
},

"sublime_private-inline-function-(prif)" : {
	"prefix":"prif", 
	"body":["private inline function ${1:function_name}(${2:arguments}) : ${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Private Inline Function (prif)"
},

"sublime_private-static-function-(prsf)" : {
	"prefix":"prsf", 
	"body":["private static function ${1:function_name}(${2:arguments}) : ${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Private Static Function (prsf)"
},

"sublime_private-static-inline-function-(prsif)" : {
	"prefix":"prsif", 
	"body":["private static inline function ${1:function_name}(${2:arguments}) : ${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Private Static Inline Function (prsif)"
},

"sublime_private-static-inline-var-(prsiv)" : {
	"prefix":"prsiv", 
	"body":["private static inline var ${1:CONSTANT_NAME} : ${3:Type}${4: = ${5:VALUE}" ,"};" ], 
	"description":"Private Static Inline Variable (prsiv)"
},

"sublime_private-static-var-(prsv)" : {
	"prefix":"prsv", 
	"body":["private static var ${1:var_name} : ${3:Type};" ], 
	"description":"Private Static Variable (prsv)"
},

"sublime_private-var-(pv)" : {
	"prefix":"prv", 
	"body":["private var ${1:var_name} : ${3:Type};" ], 
	"description":"Private variable (prv)"
},

"sublime_property-(prop)" : {
	"prefix":"prop", 
	"body":["public var ${1:name} ( get_${1:name} , set_${1:name} ) : ${2:type};" ,"private var _$1 : $2;" ,"" ,"function get_$1 () : $2 {" ,"	return _$1;" ,"}" ,"function set_$1(value : $2) : $2 {" ,"	return _$1 = value;" ,"}" ], 
	"description":"Property with getter/setter (prop)"
},

"sublime_public-function-(pf)" : {
	"prefix":"pf", 
	"body":["public function ${1:function_name}(${2:arguments}) : ${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Public Function (pf)"
},

"sublime_public-inline-function-(pif)" : {
	"prefix":"pif", 
	"body":["public inline function ${1:function_name}(${2:arguments}) : ${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Public Inline Function (pif)"
},

"sublime_public-static-function-(psf)" : {
	"prefix":"psf", 
	"body":["public static function ${1:function_name}(${2:arguments}) : ${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Public Static Function (psf)"
},

"sublime_public-static-inline-function-(psif)" : {
	"prefix":"psif", 
	"body":["public static inline function ${1:function_name}(${2:arguments}) : ${4:Void}" ,"{" ,"    ${0:// your code}" ,"}" ], 
	"description":"Public Static Inline Function (psif)"
},

"sublime_public-static-inline-var-(psiv)" : {
	"prefix":"psiv", 
	"body":["public static inline var ${1:CONSTANT_NAME} : ${3:Type}${4: = ${5:VALUE}" ,"};" ], 
	"description":"Public Static Inline Variable (psiv)"
},

"sublime_public-static-var-(psv)" : {
	"prefix":"psv", 
	"body":["public static var ${1:var_name} : ${3:Type};" ], 
	"description":"Public Static Variable (psv)"
},

"sublime_public-var-(pv)" : {
	"prefix":"pv", 
	"body":["public var ${1:var_name} : ${3:Type};" ], 
	"description":"Public Variable (pv)"
},

"sublime_switch" : {
	"prefix":"switch", 
	"body":["switch (${1:// your code}) {" ,"	case ${2:pattern} : $0" ,"}" ], 
	"description":"switch"
},

"sublime_this-(this)" : {
	"prefix":"this", 
	"body":["this.${1:property} = $1;" ], 
	"description":"Constructor Property (this)"
},

"sublime_var-(v)" : {
	"prefix":"v", 
	"body":["var ${1:name}${2: : ${3:Dynamic}}${4: = ${5:value}" ,"};" ], 
	"description":"Variable"
},

"sublime_while" : {
	"prefix":"while", 
	"body":["while (${1:condition}) {" ,"	${3:// your code}" ,"}" ], 
	"description":"while"
}

}